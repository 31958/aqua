用于共享文档的：

	飞书：https://activity.feishu.cn/activity/ug/signup/1142?tracking_code=7010o0000024cQ3AAI&utm_from=baidu_gjc_PC_qg_docty_doc&source=baidu&device=PC&e_keywordid=181695994549&e_keywordid2=181695994549
	QQ文档：https://docs.qq.com
	谷歌文档：https://docs.google.com/document/d/13BmDjX9fZ0nxCIp4z443iutme_Xt2Zx5MOUFnVSrSsc/edit?usp=sharing

VPN：https://touchvpn.net/platform

各种方法：

	认知走查法（Cognitive Walkthrough）：https://www.bing.com/search?q=cognitive+walkthrough&cvid=0e43033d8ca34e649133320898bb35ea&FORM=ANNTA1&PC=U531
	https://en.wikipedia.org/wiki/Cognitive_walkthrough
	快速原型模型：
	“快速原型模型需要迅速建造一个可以运行的软件原型 ，以便理解和澄清问题，使开发人员与用户达成共识，最终在确定的客户需求基础上开发客户满意的软件产品。 快速原型模型允许在需求分析阶段对软件的需求进行初步而非完全的分析和定义，快速设计开发出软件系统的原型，该原型向用户展示待开发软件的全部或部分功能和性能；用户对该原型进行测试评定，给出具体改进意见以丰富细化软件需求；开发人员据此对软件进行修改完善，直至用户满意认可之后，进行软件的完整实现及测试、维护。”
	极速编程法：https://www.tutorialspoint.com/extreme_programming/extreme_programming_introduction.htm


软件设计：
	第一、用户能否想到去做某个动作。 第二、用户能否找到执行某个动作的控件在哪里。 第三、用户能否看出操作控件可以产生他们想要的效果。 第四、在用户执行操作后，界面是否提供了适当的反馈，用户能否较好地理解这些反馈来有效地指导的后续的操作。https://www.jianshu.com/p/cf270d8d0b3f
	https://zhuanlan.zhihu.com/p/113244063
	http://datiki.com/fa/wp-content/uploads/2019/05/khajeheian-ebrahimi-media-branding-and-co-creation.pdf
	关键句：“The research model proposes that the user participation associates with three different types of values, including relational, economic and emotional values, to media brand enforcement, while this itself associates with two types of loyalties: attitudinal and behavioural loyalties.”

16种人格测试：https://www.16personalities.com
趣味测试：http://www.weceshi.com/index.php/wetest/index/index/src/113

好像挺有趣的插件：https://flutter.dev/

相似软件：

	彩虹屁：https://apps.apple.com/gb/app/%E5%BD%A9%E8%99%B9%E5%B1%81-%E4%B8%80%E4%B8%AA%E6%B2%A1%E6%9C%89%E6%9D%A0%E7%B2%BE%E7%9A%84%E5%A4%A9%E5%A0%82/id1462736720?l=tr
	Kindwords：https://www.kind-words.co.uk/
	Soul：soulapp.cn
	夸夸群：https://baike.baidu.com/item/%E5%A4%B8%E5%A4%B8%E7%BE%A4/23348086
	https://baike.baidu.com/tashuo/browse/content?id=fbc778d5b1540b1876e1a50d&lemmaId=23348086&fromLemmaModule=pcBottom
	关键句：“夸夸群最开始的流行可以说是一种新型的社交形式，但发展到付费求夸、夸完再踢人出群这种极度功利性与虚假性的服务之后，这意味着它的生命周期已经被缩短了。
	因为其中寻求被夸的人并非夸夸群的核心用户，核心用户在于夸人的人，而这部分用户不会付费，而夸人者为了彰显功底，会穷尽自身的机智——只要夸人的水平高，将对手PK掉，就会成为这一轮夸奖中的明星“夸夸选手”，“夸夸选手”反而更引人关注。
	这让我们不能不想到当初红极一时的直播，直播打赏曾经肥了很多主播的腰包，一个重要原因在于，那些打赏者给主播打赏能获得主播的点名感谢，而这意味着一种尊重，而依赖被点名也可以让自己被直播社群里其他人知道，他获得了现实生活中难以获得的满足感与归属感。在这个意义上，也意味着有些人希冀从直播中寻求现实生活中匮乏的东西。
	夸人成为一种付费服务之后，夸人者反而成了主角，被夸者只是道具与出题工具而已。也就是说，这部分夸人的用户与被夸者之间并没有形成深度的社交互动与关系，这种社交是短链条与一次性的，它很难持续性的让那些求夸需求者持续买单。
	下一代社交产品的方向——互相安慰、鼓励的圈子社交 解决人的孤独、寂寞与马斯洛需求理论的上层需求——爱与尊重以及自我价值的实现需求，是所有社交产品的终极目标与难题，也是新的社交产品能挖掘的机会。夸夸群成为一种商业付费服务之后，它本身就已经脱离了社交的本质，与圈子社交与群体性的圈子互相认同完全没有关系了。也就意味着，人们试图通过一些私密性、封闭性、持续性的小圈子获得身份认同的诉求与心理需求并没有得到满足。夸夸群昙花一现可能是大概率事件。
	人们希望能借助一个群体，获得虚幻的赞美与掌声来忘掉与逃避现实生活中的困境，获得身份认同，这种需求是持续顽强的存在着。在笔者看来，夸夸群的火爆或许意味着下一代社交产品的新机会——互助、互相安慰、鼓励的群体圈子社交，因为此类新兴消费被广大年轻群体所接受，一方面是出于现代生活中无处宣泄的压力、孤独与寻求安慰与认可的渴望，一方面折射出来的则是人们内心的空虚与迷茫——这正对应了那句话：如果上帝不安慰我们，我们就互相安慰。
	即通过一个社交平台营造并主打陌生人地域性圈子文化，平台上可构建一个个不同主题的封闭的相互安慰群体圈子去吸纳有共同心理诉求、有共同的倾诉表达欲望以及有着基于同一主题寻求互相安慰的人，来让他们通过在这个圈子内找到安全感与虚幻的认同与赞美或者真实的解决方案，短暂逃避与忘掉现实中的窘境并给你重新站起来直面现实问题的勇气与动力。”
	
心理学资料：

	这种情绪正如马龙·白兰度在《巴黎最后的探戈》说，我们不要问彼此的姓名，我们不要问彼此的工作，我们甚至不要问彼此来自哪里，我们只是定期来这里相会，逃避或者忘掉外面的世界。

办公用软件：

	https://git-scm.com/downloads
	https://zoom.us/j/95025917778?pwd=R0hvZG9pdER0TXlldFZkcy9iRjhOdz09
	https://www.teamviewer.com/en/download/windows/


码农用资料：

	Research PHP & Websockets to add chat function
	Decide a logo in mipmaps: project\Implementation\app\src\main\res 
	Zendesk API??
	Allow group debug app on phone & emulator
	Add functionalities to support the training of paimapiers
	Find out if this is feasible: https://blog.csdn.net/luozhuang/article/details/8678380
	https://appuals.com/fix-gradle-project-sync-failed/#:~:text=%20What%20causes%20the%20error%20message%20%E2%80%9CGradle%20Project,Distribution.%20Whenever%20you%20build%20your%20project...%20More%20
	https://www.dydao.com/12837.html
	http://www.xueuisheji.cn/archives/17503
	https://www.aliyun.com/ss/?k=模版
	https://flutterchina.club
	https://github.com/emrade/flutter-social
	https://flutter.dev/docs/development/tools/sdk/releases#linux
	https://www.tutorialkart.com/flutter/flutter-install-on-linux-ubuntu/
	https://github.com/vinuthakaranth/SocialMediaAppForFoodies
	https://github.com/emrade/flutter-ghana-ui-challenge-week-1
	https://dribbble.com/shots/6659481-Mobile-app-Social-media-network
	https://dribbble.com/tags/app
	https://n1plcpnl0042.prod.ams1.secureserver.net:2083/cpsess4672067085/
	https://github.com/markpairdha/WhatsApp-Clone/tree/23ba5dae37e7a6f64b5952d336f94e2253764904/WhatsApp/app/src
	https://github.com/markpairdha/WhatsApp-Clone/tree/23ba5dae37e7a6f64b5952d336f94e2253764904/WhatsApp/app/src/main/java/com/github/markpairdha/whatsapp

	https://github.com/laravel/socialite
	https://github.com/overtrue/share.js
	https://github.com/fxsjy/jieba
	https://github.com/ysc/word
	https://github.com/hankcs/HanLP
	https://github.com/fighting41love/funNLP




package com.github.markpairdha.whatsapp;


import android.os.Bundle;

import androidx.annotation.NonNull;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;

import com.firebase.ui.database.FirebaseRecyclerAdapter;
import com.firebase.ui.database.FirebaseRecyclerOptions;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;
import com.squareup.picasso.Picasso;

import de.hdodenhof.circleimageview.CircleImageView;


public class ContactsFragment extends Fragment
{
    private View ContactsView;
    private RecyclerView myContactsList;

    private DatabaseReference ContacsRef, UsersRef;
    private FirebaseAuth mAuth;
    private String currentUserID;


    public ContactsFragment()
    {

    }


    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        ContactsView = inflater.inflate(R.layout.fragment_contacts, container, false);


        myContactsList = (RecyclerView) ContactsView.findViewById(R.id.contacts_list);
        myContactsList.setLayoutManager(new LinearLayoutManager(getContext()));


        mAuth = FirebaseAuth.getInstance();
        currentUserID = mAuth.getCurrentUser().getUid();


        ContacsRef = FirebaseDatabase.getInstance().getReference().child("Contacts").child(currentUserID);
        UsersRef = FirebaseDatabase.getInstance().getReference().child("Users");


        return ContactsView;
    }
    @Override
    public void onStart()
    {
        super.onStart();

        FirebaseRecyclerO


